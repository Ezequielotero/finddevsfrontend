{"ast":null,"code":"var _jsxFileName = \"/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HirePopUp/HirePopUp.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport style from './HirePopUp.module.css';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport JobCard from './JobCard';\nimport Empty from \"../../Media/hiring.svg\";\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HirePopUp({\n  color,\n  applicantUsername,\n  user,\n  applicantsNotifications\n}) {\n  _s();\n\n  const [screen, setScreen] = useState(true);\n  const [selection, setSelection] = useState({});\n  const [jobs, setJobs] = useState([]);\n  const [selectionUsers, setSelectionUsers] = useState([]);\n\n  function getInfoAndSetProject(project) {\n    axios.get(`/projects/${project.id}`).then(jobsData => {\n      setJobs(jobsData.data.jobOpportunities);\n      setSelectionUsers(jobsData.data.users);\n      setSelection({ ...selection,\n        project: project\n      });\n    }).catch(err => console.log(err));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    trigger: /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        backgroundColor: color,\n        border: `2px solid ${color}`\n      },\n      id: style.hireBtn,\n      children: \"HIRE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }, this),\n    modal: true,\n    children: close => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: style.mainDiv,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: style.form,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: style.closeBtn,\n          onClick: close,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 69\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this), screen && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"font800\",\n            children: \"Select a project\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"justifyCenter\",\n            id: \"flexWrap\",\n            children: user.projects && user.projects.map(project => project.userXprojects.isFounder ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                background: selection.project && selection.project.name === project.name ? 'rgb(231,231,231' : null\n              },\n              onClick: () => getInfoAndSetProject(project),\n              id: style.projectDiv,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"Project logo\",\n                id: \"icon\",\n                src: project.logo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                id: style.projectName,\n                className: \"font200\",\n                children: project.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 49\n              }, this)]\n            }, project.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 45\n            }, this) : null)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }, this), !screen && !selectionUsers.find(user => user.username === applicantUsername) && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '80%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"font800\",\n            children: [\"Jobs at \", selection.project.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: style.jobContainer,\n            children: jobs.length > 0 ? jobs.map(job => applicantsNotifications.find(notification => notification.jobId === job.id) ? /*#__PURE__*/_jsxDEV(JobCard, {\n              alreadyInvited: true,\n              close: close,\n              user: user,\n              applicantUsername: applicantUsername,\n              project: selection,\n              job: job\n            }, job.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(JobCard, {\n              close: close,\n              user: user,\n              applicantUsername: applicantUsername,\n              project: selection,\n              job: job\n            }, job.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 47\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"No jobs are posted for this project.\",\n                id: style.emptyIcon,\n                src: Empty\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: `/project/addJob/${selection.project.id}`,\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  id: style.postBtn,\n                  style: {\n                    background: selection.project.mainColor,\n                    color: selection.project.brightness === 'bright' ? '#fff' : '#000'\n                  },\n                  children: \"Post a job\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 98\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this), !screen && selectionUsers.find(user => user.username === applicantUsername) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"displayFlexColumn\",\n          id: \"alignItemsCenter\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            id: style.accepted,\n            class: \"fas fa-check-circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"font800\",\n            children: [applicantUsername, \" is already part of \", selection.project.name, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !selection.project,\n          onClick: () => setScreen(!screen),\n          style: {\n            alignSelf: 'flex-end',\n            backgroundColor: !selection.project ? 'rgb(231,231,231)' : color,\n            border: !selection.project ? '2px solid rgb(231,231,231)' : `2px solid ${color}`\n          },\n          id: style.btn,\n          children: screen ? 'NEXT' : 'BACK'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(HirePopUp, \"G7P2Epv3m3UG7RjWiTGC7MVovYE=\");\n\n_c = HirePopUp;\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.userInfo\n  };\n}\n\nexport default connect(mapStateToProps, null)(HirePopUp);\n\nvar _c;\n\n$RefreshReg$(_c, \"HirePopUp\");","map":{"version":3,"sources":["/Users/felipebuscaglia/Henry/finddevsfrontend/src/Components/HirePopUp/HirePopUp.jsx"],"names":["React","useState","Popup","style","axios","connect","JobCard","Link","FontAwesomeIcon","faTimes","HirePopUp","color","applicantUsername","user","applicantsNotifications","screen","setScreen","selection","setSelection","jobs","setJobs","selectionUsers","setSelectionUsers","getInfoAndSetProject","project","get","id","then","jobsData","data","jobOpportunities","users","catch","err","console","log","backgroundColor","border","hireBtn","close","mainDiv","form","closeBtn","projects","map","userXprojects","isFounder","background","name","projectDiv","logo","projectName","find","username","width","jobContainer","length","job","notification","jobId","emptyIcon","Empty","postBtn","mainColor","brightness","accepted","alignSelf","btn","mapStateToProps","state","userInfo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport style from './HirePopUp.module.css';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport JobCard from './JobCard';\nimport Empty from '../../Media/hiring.svg';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nfunction HirePopUp({ color, applicantUsername, user, applicantsNotifications }) {\n\n    const [screen, setScreen] = useState(true);\n    const [selection, setSelection] = useState({});\n    const [jobs, setJobs] = useState([]);\n    const [selectionUsers, setSelectionUsers] = useState([]);\n\n    function getInfoAndSetProject(project) {\n        axios.get(`/projects/${project.id}`)\n            .then(jobsData => {\n                setJobs(jobsData.data.jobOpportunities);\n                setSelectionUsers(jobsData.data.users);\n                setSelection({ ...selection, project: project })\n            })\n            .catch(err => console.log(err))\n    }\n\n    return (\n        <Popup trigger={<button style={{ backgroundColor: color, border: `2px solid ${color}` }} id={style.hireBtn}>HIRE</button>} modal>\n            {close => (\n                <div id={style.mainDiv}>\n                    <div id={style.form}>\n                        <button id={style.closeBtn} onClick={close}><FontAwesomeIcon icon={faTimes} /></button>\n                        {screen &&\n                            <div>\n                                <h1 className='font800'>Select a project</h1>\n                                <div className='justifyCenter' id='flexWrap'>\n                                    {user.projects && user.projects.map(project =>\n                                        project.userXprojects.isFounder ?\n                                            <div key={project.id} style={{ background: selection.project && selection.project.name === project.name ? 'rgb(231,231,231' : null }} onClick={() => getInfoAndSetProject(project)} id={style.projectDiv}>\n                                                <img alt=\"Project logo\" id='icon' src={project.logo} />\n                                                <span id={style.projectName} className='font200'>{project.name}</span>\n                                            </div>\n                                            : null\n                                    )}\n                                </div>\n                            </div>}\n                        {!screen && !selectionUsers.find(user => user.username === applicantUsername) &&\n                            <div style={{ width: '80%' }}>\n                                <h1 className='font800'>Jobs at {selection.project.name}</h1>\n                                <div id={style.jobContainer}>\n                                    {jobs.length > 0 ?\n                                        jobs.map(job => \n                                            applicantsNotifications.find (notification => notification.jobId === job.id) ?\n                                            <JobCard alreadyInvited={true} key={job.id} close={close} user={user} applicantUsername={applicantUsername} project={selection} job={job} />\n                                            : <JobCard key={job.id} close={close} user={user} applicantUsername={applicantUsername} project={selection} job={job} />\n                                        )\n                                        :\n                                        <div>\n                                            <img alt=\"No jobs are posted for this project.\" id={style.emptyIcon} src={Empty} />\n                                            <Link to={`/project/addJob/${selection.project.id}`}><button id={style.postBtn} style={{ background: selection.project.mainColor, color: selection.project.brightness === 'bright' ? '#fff' : '#000' }}>Post a job</button></Link>\n                                        </div>}\n                                </div>\n                            </div>\n                        }\n                        {!screen && selectionUsers.find(user => user.username === applicantUsername) &&\n                            <div className='displayFlexColumn' id='alignItemsCenter'>\n                                <i id={style.accepted} class=\"fas fa-check-circle\"></i>\n                                <h1 className='font800'>{applicantUsername} is already part of {selection.project.name}!</h1>\n                            </div>}\n                        <button disabled={!selection.project} onClick={() => setScreen(!screen)} style={{ alignSelf: 'flex-end', backgroundColor: !selection.project ? 'rgb(231,231,231)' : color, border: !selection.project ? '2px solid rgb(231,231,231)' : `2px solid ${color}` }} id={style.btn}>{screen ? 'NEXT' : 'BACK'}</button>\n                    </div>\n                </div>\n            )}\n        </Popup>\n    )\n}\n\n\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userInfo\n    }\n}\n\nexport default connect(mapStateToProps, null)(HirePopUp);"]},"metadata":{},"sourceType":"module"}